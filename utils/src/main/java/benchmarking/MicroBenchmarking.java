package benchmarking;


import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;

/**
 * Created by lfalcao on 19/10/2016.
 */
public class MicroBenchmarking {
    /* How many times to repeat the test.  5 seems to give reasonable results */
    private static final int DEFAULT_RUN_COUNT = 5;

    /**
     * Repeatedly generate results using a Supplier to eliminate some of the
     * issues of running a micro-benchmark.
     *
     * @param <T> The type of result generated by the Supplier
     * @param label Description of what's being measured
     * @param supplier The Supplier to measure execution time of
     * @return The last execution time of the Supplier code
     */
    public static <T> T measure(String label, Supplier<T> supplier) {
        return measure(label, supplier, DEFAULT_RUN_COUNT);
    }

    /**
     * Repeatedly generate results using a Supplier to eliminate some of the
     * issues of running a micro-benchmark.
     *
     * @param <T> The type of result generated by the Supplier
     * @param label Description of what's being measured
     * @param supplier The Supplier to measure execution time of
     * @param runCount the number of times to run the supplier
     * @return The last execution time of the Supplier code
     */
    public static <T> T measure(String label, Supplier<T> supplier, int runCount) {
        long startTime = System.nanoTime();
        T result = null;

        for (int i = 0; i < runCount; i++)
            result = supplier.get();
        long endTime = System.nanoTime();

        long millis = TimeUnit.NANOSECONDS.toMillis(endTime - startTime);
        System.out.printf("%s took %d ms\n", label, millis);
        return result;
    }
}
